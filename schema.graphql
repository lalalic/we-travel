scalar Date

type File {
  id: ID!
  url: String
  crc: Int
}

type FileToken {
  token: String!
  expires: Int!
  id: String
}

type Footprint implements Node {
  id: ID!
  journey: ObjectID
  when: Date
  loc: JSON
  note: String
  photos: [String]
  video: String
  audio: String
}

enum Gender {
  girl
  boy
}

type Itinerary implements Node {
  id: ID!
  journey: Journey
  place: String
  days: Int
  dayth: Int
  trans: String
}

type Journey implements Node {
  id: ID!
  name: String
  startedAt: Date
  endedAt: Date
  status: String
  author: ObjectID
  itineraries: [Itinerary]
  footprints: [Footprint]
  waypoints: [Waypoint]
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Log implements Node {
  id: ID!
  type: String
  operation: String
  variables: JSON
  status: Int
  startedAt: Date
  time: Int
  report: JSON
  author: User
}

type Mutation {
  requestToken(contact: String!): Boolean
  login(contact: String!, token: String!, name: String): User
  logout: Boolean
  user_update(photo: String, username: String, birthday: Date, gender: Gender, location: String, signature: String): Date
  role_create(name: String): Role
  role_update(_id: ObjectID!, name: String): Date
  role_remove(_id: ObjectID!): Boolean
  role_user_add(_id: ObjectID!, users: [String!]!): Date
  role_user_remove(_id: ObjectID!, users: [String!]!): Date
  file_create(_id: String!, host: ID!, bucket: String, size: Int, crc: Int, mimeType: String, imageInfo: JSON): File
  file_clean(host: ID!): Boolean
  journey_create(name: String, startedAt: Date, endedAt: Date): Journey
  journey_update(_id: ObjectID!, name: String, startedAt: Date, endedAt: Date): Date
  journey_delete(_id: ObjectID!): Boolean
  footprint_create(journey: ObjectID, note: String, when: Date, loc: JSON, photos: [String], _id: ObjectID): Footprint
  footprint_update(_id: ObjectID, note: String, when: Date, loc: JSON, photos: [String]): Date
  waypoint_create(when: Date, loc: JSON, photo: String, _id: ObjectID): Waypoint
  waypoint_batch(data: JSON): Int
}

interface Node {
  id: ID!
}

# mongodb ID
scalar ObjectID

type PageInfo {
  hasNextPage: Boolean
  endCursor: JSON
  hasPreviousPage: Boolean
  startCursor: JSON
}

type Query {
  version: String!
  schema: String!
  me: User!
  file_upload_token(key: String): FileToken
}

type Role implements Node {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date
  author: User
  users: [User]
}

type Subscription {
  ping: Boolean
}

type User implements Node {
  id: ID!
  photo(size: Int = 25): String
  name: String
  email: String
  phone: String
  createdAt: Date!
  updatedAt: Date
  token: String
  username: String
  birthday: Date
  gender: Gender
  location: String
  signature: String
  roles: [Role]
  journeys: [Journey]
  journey(_id: ObjectID): Journey
  waypoints(startedAt: Date, endedAt: Date): [Waypoint]
}

type Waypoint implements Node {
  id: ID!
  when: Date
  loc: JSON
  photo: String
  author: ObjectID
}
